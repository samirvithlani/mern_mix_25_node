const userModel = require("./models/UserModel") //userModel == userSchema == db.users



//APIS
//http:localhost:3000/test
app.get("/test",(req,res)=>{
    console.log("test api called...")
    res.send("TEST API CALLED....")
})

const user = {
    id:1,
    name:"ram",
    age:23
}
app.get("/user",(req,res)=>{

    //res.json(user)
    res.json({
        data:user,
        message:"user get successfully !"
    })
})

var users = [
    {
        id:1,
        name:"ram",
        age:23
    },
    {
        id:2,
        name:"shyam",
        age:24
    },
    {
        id:3,
        name:"amit",
        age:25
    }
]

app.get("/users",(req,res)=>{
    res.json({
        data:users,
        message:"all users fetched successfully"
    })
})

app.get("/usersfromdb",async(req,res)=>{

    //databse....
    //db.users.find
    const users = await userModel.find()
    console.log(users)
    res.json({
        message:"users fetched..",
        data:users
    })


})

-------------------------------------------------------------------------
web app:
apache tomcat:
web server:

req : --> response

server create: web app:

APIS

http module: node js builtin
           : process manual --> socket
express module: 3rd party:
           :auto :

devtool

npm i nodemon -g
-g : global module

npm i nodemon --dev

mongo db:
mongoose: ORM: object relation mapping:
class --> collection

users -- >userSchema


REQUEST:
APP -->Routes --> Controller[functions]-->model
RESPO
-->controller --> routes-->app

middleware:
1)app level
2)global m
3)routes level mi


filter: api -->routes --> [function:decide <-->controller] controller [business logic]

zod validation....


nodemailer

google account -->sec==>2 step veri.

search for app password --->
copy

role
id(int) name

user
id name email age roleId
1   x    x     21  1

create table user(....roleId int,foreign key ref role(id))

select * from user;
id name em... 1

JOIN
selct * from user natural join role 

multer: 
npm i multer :
 bin...

store..
databse:
server:
cloud:

location -->copy -->paste

multer middleware :



AUTH MODULE:

User Register: plain password --> 

fb
sam123: secret: -->hash --> bcrypt



api.. react - login -->
login sucess -- >id localstorage store...

JWT TOKEN

web security:
auuth2 : jwt token json web token :-->


login :- token : cookies:store:

getUserFromToken

Bearer Token

Token:

npm i jsonwebtoken

userCOntroller login api
token generate : user._id
--------------------------
getuserfrom token -->body - post -- req.body
token --> db user

api securty: middleware: headers -- autho -- token Bearer : verify
next

response..